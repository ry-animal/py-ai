name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        cache: true

    - name: Sync dependencies
      run: uv sync --frozen

    - name: Lint with ruff
      run: |
        uv run ruff check .
        uv run ruff format --check .

    - name: Tests
      run: uv run pytest -v --tb=short

    - name: Security scan with bandit
      run: |
        uv pip install bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ || true

    - name: Dependency security scan
      run: |
        uv pip install pip-audit
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        uv run pip-audit || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build --target prod -t py-ai:latest .
        docker build --target worker -t py-ai-worker:latest .
    
    - name: Test Docker compose
      run: |
        echo "ANTHROPIC_API_KEY=test" > .env
        echo "OPENAI_API_KEY=test" >> .env
        docker compose config

  eval-check:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        cache: true
    
    - name: Sync dependencies
      run: uv sync --frozen
    
    - name: Check evaluation scripts
      run: |
        uv run python -c "import scripts.run_evals; print('✓ Eval script valid')"
        uv run python -c "import scripts.run_ragas; print('✓ RAGAS script valid')"
        uv run python -c "import scripts.run_agent_evals; print('✓ Agent eval script valid')"
        test -f tests/golden/golden.json && echo "✓ Golden dataset exists"
        test -f tests/golden/agent_golden.json && echo "✓ Agent golden dataset exists"
