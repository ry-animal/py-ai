[project]
name = "py-ai"
version = "0.1.0"
description = "Python AI learning project"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "pydantic-settings>=2.4.0",
    "openai>=1.43.0",
    "httpx>=0.27.0",
    "instructor>=1.3.0",
    "anthropic>=0.34.0",
    "chromadb>=0.5.4",
    "sentence-transformers>=3.0.1",
    "email-validator>=2.0.0",
    "pytest>=8.2.0",
    "requests>=2.32.0",
    "ragas>=0.1.6",
    "datasets>=2.19.0",
    "langchain>=0.2.0",
    "langgraph>=0.2.30",
    "celery[redis]>=5.4.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-instrumentation-httpx>=0.41b0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "python-multipart>=0.0.6",
    "pypdf>=4.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "ruff>=0.6.9",
    "pre-commit>=3.8.0",
]
agent = [
    "redis>=5.0.0",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "B", "UP", "N", "S", "C4", "SIM"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assertions in test files
"demo_capstone.py" = ["S112"]  # Allow try-except-continue in demo
"src/app/routers_*.py" = ["B008", "B904", "F841", "E501"]  # Allow FastAPI patterns and long lines
"src/app/providers/*.py" = ["F841", "S113", "E501"]  # Allow dev code patterns and long lines
"src/app/document_service.py" = ["SIM105", "S110"]  # Allow cleanup patterns
"src/app/tasks.py" = ["B904"]  # Allow exception patterns in tasks

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
addopts = "-q"

[build-system]
requires = ["setuptools>=68.0.0"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
]
